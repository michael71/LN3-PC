/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

 /*
 * AccessoryUI.java
 *
 * Created on 08.04.2011, 14:24:32
 */
package de.blankedv.ln3pc;

import java.util.prefs.Preferences;
import java.util.List;
import java.util.ArrayList;
import static de.blankedv.ln3pc.MainUI.*;
import static de.blankedv.ln3pc.Variables.INVALID_INT;
import static de.blankedv.ln3pc.Variables.TYPE_ACCESSORY;
import static de.blankedv.ln3pc.Variables.TYPE_SENSOR;
import static de.blankedv.ln3pc.Variables.TYPE_SIGNAL_1BIT;
import static de.blankedv.ln3pc.Variables.TYPE_SIGNAL_2BIT;
import static de.blankedv.ln3pc.Variables.lanbahnData;
import javax.swing.JCheckBox;

/**
 *
 * @author mblank
 */
public class AccessoryUI extends javax.swing.JFrame {

    private static final long serialVersionUID = 534251256456411L;
    private int w_adr;      // weichen adresse
    private int[] data = new int[10];

    // Bilden einer Liste, damit wir später an alle Fenster dieses Typs die
    // Updates verschicken können
    static List<AccessoryUI> accUIList = new ArrayList<AccessoryUI>();

    private int myInstance;
    Preferences prefs = Preferences.userNodeForPackage(this.getClass());
    static int AccessoryUIInstance = 0;

    private JCheckBox[][] cb = new JCheckBox[10][2];

    public static void updateAll() {
        for (AccessoryUI aui : accUIList) {
            aui.updateAllCheckboxes();
        }
    }

    public static void saveAllPrefs() {
        for (AccessoryUI aui : accUIList) {
            aui.savePrefs();
        }
    }

    /**
     * Creates new form WeichenUI
     */
    public AccessoryUI() {
        initComponents();
        initCBArray();
        myInstance = AccessoryUIInstance++;
        loadPrefs(); //myInstance is used here.
        if (DEBUG) {
            System.out.println("turnout row start adr=" + w_adr);
        }
        jComboBox1.setSelectedIndex(0);  // index starts from 0, addresses start also at 0
        accUIList.add(this);
        this.setTitle("Turnouts/Signals/Sensors A:" + w_adr + "ff");

        updateAllCheckboxes(); // from lanbahnData
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblAddress = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jPanel1 = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jCheckBox5 = new javax.swing.JCheckBox();
        jCheckBox6 = new javax.swing.JCheckBox();
        jCheckBox7 = new javax.swing.JCheckBox();
        jCheckBox8 = new javax.swing.JCheckBox();
        jCheckBox9 = new javax.swing.JCheckBox();
        jCheckBox10 = new javax.swing.JCheckBox();
        jCheckBox11 = new javax.swing.JCheckBox();
        jCheckBox12 = new javax.swing.JCheckBox();
        jCheckBox13 = new javax.swing.JCheckBox();
        jCheckBox14 = new javax.swing.JCheckBox();
        jCheckBox15 = new javax.swing.JCheckBox();
        jCheckBox16 = new javax.swing.JCheckBox();
        jCheckBox17 = new javax.swing.JCheckBox();
        jCheckBox18 = new javax.swing.JCheckBox();
        jCheckBox19 = new javax.swing.JCheckBox();
        jCheckBox20 = new javax.swing.JCheckBox();
        jLabel14 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        lblAddress1 = new javax.swing.JLabel();
        lblAddress2 = new javax.swing.JLabel();

        setTitle("Turnouts,Signals,Sensors (1/2bit)");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        lblAddress.setText("Addr");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "10", "20", "30", "40", "50", "60", "70", "80", "90", "100", "110", "120", "130", "140", "150", "160", "170", "180", "190", "200", "210", "220", "230", "240", "250", "260", "270", "280", "290", "300", "310", "320", "330", "340", "350", "360", "370", "380", "390", "400", "410", "420", "430", "440", "450", "460", "470", "480", "490", "500", "510", "520", "530", "540", "550", "560", "570", "580", "590", "600", "610", "620", "630", "640", "650", "660", "670", "680", "690", "700", "710", "720", "730", "740", "750", "760", "770", "780", "790", "800", "810", "820", "830", "840", "850", "860", "870", "880", "890", "900", "910", "920", "930", "940", "950", "960", "970", "980", "990", "1000", "1010", "1020", "1030", "1040", "1050", "1060", "1070", "1080", "1090", "1100", "1110", "1120", "1130", "1140", "1150", "1160", "1170", "1180", "1190", "1200" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jPanel1.setLayout(new java.awt.GridLayout(3, 10, 1, 0));

        jCheckBox1.setBorder(null);
        jCheckBox1.setBorderPainted(true);
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });
        jPanel1.add(jCheckBox1);

        jCheckBox2.setBorder(null);
        jCheckBox2.setBorderPainted(true);
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });
        jPanel1.add(jCheckBox2);

        jCheckBox3.setBorder(null);
        jCheckBox3.setBorderPainted(true);
        jCheckBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox3ActionPerformed(evt);
            }
        });
        jPanel1.add(jCheckBox3);

        jCheckBox4.setBorder(null);
        jCheckBox4.setBorderPainted(true);
        jCheckBox4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox4ActionPerformed(evt);
            }
        });
        jPanel1.add(jCheckBox4);

        jCheckBox5.setBorder(null);
        jCheckBox5.setBorderPainted(true);
        jCheckBox5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox5ActionPerformed(evt);
            }
        });
        jPanel1.add(jCheckBox5);

        jCheckBox6.setBorder(null);
        jCheckBox6.setBorderPainted(true);
        jCheckBox6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox6ActionPerformed(evt);
            }
        });
        jPanel1.add(jCheckBox6);

        jCheckBox7.setBorder(null);
        jCheckBox7.setBorderPainted(true);
        jCheckBox7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox7ActionPerformed(evt);
            }
        });
        jPanel1.add(jCheckBox7);

        jCheckBox8.setBorder(null);
        jCheckBox8.setBorderPainted(true);
        jCheckBox8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox8ActionPerformed(evt);
            }
        });
        jPanel1.add(jCheckBox8);

        jCheckBox9.setBorder(null);
        jCheckBox9.setBorderPainted(true);
        jCheckBox9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox9ActionPerformed(evt);
            }
        });
        jPanel1.add(jCheckBox9);

        jCheckBox10.setBorder(null);
        jCheckBox10.setBorderPainted(true);
        jCheckBox10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox10ActionPerformed(evt);
            }
        });
        jPanel1.add(jCheckBox10);

        jCheckBox11.setBorder(null);
        jCheckBox11.setBorderPainted(true);
        jCheckBox11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox11ActionPerformed(evt);
            }
        });
        jPanel1.add(jCheckBox11);

        jCheckBox12.setBorder(null);
        jCheckBox12.setBorderPainted(true);
        jCheckBox12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox12ActionPerformed(evt);
            }
        });
        jPanel1.add(jCheckBox12);

        jCheckBox13.setBorder(null);
        jCheckBox13.setBorderPainted(true);
        jCheckBox13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox13ActionPerformed(evt);
            }
        });
        jPanel1.add(jCheckBox13);

        jCheckBox14.setBorder(null);
        jCheckBox14.setBorderPainted(true);
        jCheckBox14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox14ActionPerformed(evt);
            }
        });
        jPanel1.add(jCheckBox14);

        jCheckBox15.setBorder(null);
        jCheckBox15.setBorderPainted(true);
        jCheckBox15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox15ActionPerformed(evt);
            }
        });
        jPanel1.add(jCheckBox15);

        jCheckBox16.setBorder(null);
        jCheckBox16.setBorderPainted(true);
        jCheckBox16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox16ActionPerformed(evt);
            }
        });
        jPanel1.add(jCheckBox16);

        jCheckBox17.setBorder(null);
        jCheckBox17.setBorderPainted(true);
        jCheckBox17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox17ActionPerformed(evt);
            }
        });
        jPanel1.add(jCheckBox17);

        jCheckBox18.setBorder(null);
        jCheckBox18.setBorderPainted(true);
        jCheckBox18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox18ActionPerformed(evt);
            }
        });
        jPanel1.add(jCheckBox18);

        jCheckBox19.setBorder(null);
        jCheckBox19.setBorderPainted(true);
        jCheckBox19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox19ActionPerformed(evt);
            }
        });
        jPanel1.add(jCheckBox19);

        jCheckBox20.setBorder(null);
        jCheckBox20.setBorderPainted(true);
        jCheckBox20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox20ActionPerformed(evt);
            }
        });
        jPanel1.add(jCheckBox20);

        jLabel14.setText("  0 ");
        jPanel1.add(jLabel14);

        jLabel12.setText("  1");
        jPanel1.add(jLabel12);

        jLabel15.setText("  2");
        jPanel1.add(jLabel15);

        jLabel16.setText("  3");
        jPanel1.add(jLabel16);

        jLabel17.setText("  4");
        jPanel1.add(jLabel17);

        jLabel18.setText("  5");
        jPanel1.add(jLabel18);

        jLabel19.setText("  6");
        jPanel1.add(jLabel19);

        jLabel20.setText("  7");
        jPanel1.add(jLabel20);

        jLabel21.setText("  8");
        jPanel1.add(jLabel21);

        jLabel22.setText("  9");
        jPanel1.add(jLabel22);

        jLabel13.setText("Basis");

        lblAddress1.setText("b1");

        lblAddress2.setText("b0");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblAddress2))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblAddress)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblAddress1)))
                .addGap(6, 6, 6)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addGap(9, 9, 9)
                                .addComponent(lblAddress))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblAddress2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblAddress1)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        int new_adr = Integer.parseInt(jComboBox1.getSelectedItem().toString());
        w_adr = new_adr;
        if (DEBUG) {
            System.out.println("w adr=" + w_adr);
        }
        this.setTitle("Turnouts/Signals/Sensors A:" + w_adr + "ff");
        updateAllCheckboxes();
}//GEN-LAST:event_jComboBox1ActionPerformed

    private void jCheckBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox3ActionPerformed
        handleAction(2, 0);
    }//GEN-LAST:event_jCheckBox3ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        if (w_adr == 0) {
            return;   // "0" is no valid address
        }
        handleAction(0, 0);
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        handleAction(1, 0);
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void jCheckBox4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox4ActionPerformed
        handleAction(3, 0);
    }//GEN-LAST:event_jCheckBox4ActionPerformed

    private void jCheckBox5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox5ActionPerformed
        handleAction(4, 0);
    }//GEN-LAST:event_jCheckBox5ActionPerformed

    private void jCheckBox6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox6ActionPerformed
        handleAction(5, 0);
    }//GEN-LAST:event_jCheckBox6ActionPerformed

    private void jCheckBox7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox7ActionPerformed
        handleAction(6, 0);
    }//GEN-LAST:event_jCheckBox7ActionPerformed

    private void jCheckBox8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox8ActionPerformed
        handleAction(7, 0);
    }//GEN-LAST:event_jCheckBox8ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        savePrefs();
        AccessoryUIInstance--;
        accUIList.remove(this);
    }//GEN-LAST:event_formWindowClosing

    private void jCheckBox9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox9ActionPerformed
        handleAction(8, 0);
    }//GEN-LAST:event_jCheckBox9ActionPerformed

    private void jCheckBox10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox10ActionPerformed
        handleAction(9, 0);
    }//GEN-LAST:event_jCheckBox10ActionPerformed

    private void jCheckBox11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox11ActionPerformed
        if (w_adr != 0) {
            handleAction(0, 1);
        }
    }//GEN-LAST:event_jCheckBox11ActionPerformed

    private void jCheckBox12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox12ActionPerformed
        handleAction(1, 1);
    }//GEN-LAST:event_jCheckBox12ActionPerformed

    private void jCheckBox13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox13ActionPerformed
        handleAction(2, 1);
    }//GEN-LAST:event_jCheckBox13ActionPerformed

    private void jCheckBox14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox14ActionPerformed
        handleAction(3, 1);
    }//GEN-LAST:event_jCheckBox14ActionPerformed

    private void jCheckBox15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox15ActionPerformed
        handleAction(4, 1);
    }//GEN-LAST:event_jCheckBox15ActionPerformed

    private void jCheckBox16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox16ActionPerformed
        handleAction(5, 1);
    }//GEN-LAST:event_jCheckBox16ActionPerformed

    private void jCheckBox17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox17ActionPerformed
        handleAction(6, 1);
    }//GEN-LAST:event_jCheckBox17ActionPerformed

    private void jCheckBox18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox18ActionPerformed
        handleAction(7, 1);
    }//GEN-LAST:event_jCheckBox18ActionPerformed

    private void jCheckBox19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox19ActionPerformed
        handleAction(8, 1);
    }//GEN-LAST:event_jCheckBox19ActionPerformed

    private void jCheckBox20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox20ActionPerformed
        handleAction(9, 1);
    }//GEN-LAST:event_jCheckBox20ActionPerformed

    private void handleAction(int i, int bit) {
        int bitVal = (0x01 << bit);
        if (cb[i][bit].getModel().isSelected()) {
            data[i] |= bitVal;
        } else {
            data[i] &= ~(bitVal);
        }
        sendAccessoryToLocoNet(w_adr + i, data[i]);
    }

    private void sendAccessoryToLocoNet(int addr, int data) {
        int data0, data1;
        LbData lb = lanbahnData.get(addr);
        if (lb == null) {
            lb = new LbData(data, TYPE_ACCESSORY);
        }
        switch (lb.getType()) {
            case TYPE_ACCESSORY:
            case TYPE_SIGNAL_1BIT:
                // ignore bit1, only use bit0
                data0 = data & 0x01;  // only last bit is used for LocoNet/DCC
                Utils.updateLanbahnData(addr, data0);   // don't change type, only change data              
               // serialIF.send(LNUtil.makeOPC_SW_REQ(addr - 1, (1 - data0), 1));    // TODO test
                break;
            case TYPE_SENSOR:
            case TYPE_SIGNAL_2BIT:
                // 2 bit values, use 2 loconet addresses and store 2bit value for lanbahn
                Utils.updateLanbahnData(addr, data);   // don't change type, only change data  

                data0 = data & 0x01;  // bit0 => ln-first address                           
              //  serialIF.send(LNUtil.makeOPC_SW_REQ(addr - 1, (1 - data0), 1));   // TODO test  
                PanelElement pe = PanelElement.getByAddress(addr);
                if ((pe != null) && (pe.secondaryAdr != INVALID_INT)) {
                    data1 = (data >> 1) & 0x01;  // for route-lighting bit1 and se.secondaryAdr are used
                 //   serialIF.send(LNUtil.makeOPC_SW_REQ(pe.secondaryAdr - 1, (1 - data1), 1));   // TODO test
                }
                break;
            default:
                // cannot set other types
                if (DEBUG) {
                    System.out.println("ERROR, cannot set data for type=" + lb.getType());
                }
                break;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox10;
    private javax.swing.JCheckBox jCheckBox11;
    private javax.swing.JCheckBox jCheckBox12;
    private javax.swing.JCheckBox jCheckBox13;
    private javax.swing.JCheckBox jCheckBox14;
    private javax.swing.JCheckBox jCheckBox15;
    private javax.swing.JCheckBox jCheckBox16;
    private javax.swing.JCheckBox jCheckBox17;
    private javax.swing.JCheckBox jCheckBox18;
    private javax.swing.JCheckBox jCheckBox19;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox20;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JCheckBox jCheckBox6;
    private javax.swing.JCheckBox jCheckBox7;
    private javax.swing.JCheckBox jCheckBox8;
    private javax.swing.JCheckBox jCheckBox9;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblAddress;
    private javax.swing.JLabel lblAddress1;
    private javax.swing.JLabel lblAddress2;
    // End of variables declaration//GEN-END:variables

    // array used to be able to use indexes for checkboxes
    private void initCBArray() {
        cb[0][0] = jCheckBox1;
        cb[0][1] = jCheckBox11;
        cb[1][0] = jCheckBox2;
        cb[1][1] = jCheckBox12;
        cb[2][0] = jCheckBox3;
        cb[2][1] = jCheckBox13;
        cb[3][0] = jCheckBox4;
        cb[3][1] = jCheckBox14;
        cb[4][0] = jCheckBox5;
        cb[4][1] = jCheckBox15;
        cb[5][0] = jCheckBox6;
        cb[5][1] = jCheckBox16;
        cb[6][0] = jCheckBox7;
        cb[6][1] = jCheckBox17;
        cb[7][0] = jCheckBox8;
        cb[7][1] = jCheckBox18;
        cb[8][0] = jCheckBox9;
        cb[8][1] = jCheckBox19;
        cb[9][0] = jCheckBox10;
        cb[9][1] = jCheckBox20;
    }

    private boolean updateFromLanbahnData(int i, int bit) {
        LbData lb = lanbahnData.get(w_adr + i);
        if (lb == null) {
            return false;
        } else {
            if (bit == 0) {
                return ((lb.getData() & 0x01) != 0);
            } else {
                return ((lb.getData() & 0x02) != 0);
            }
        }
    }

    private boolean is2bitType(int i) {
        LbData lb = lanbahnData.get(w_adr + i);
        if (lb == null) {
            return false;
        }
        switch (lb.getType()) {
            case TYPE_ACCESSORY:
            case TYPE_SIGNAL_1BIT:
                return false;
            default:
                return true;
        }
    }

    private void updateAllCheckboxes() {
        for (int i = 0; i < 10; i++) {
            cb[i][0].setEnabled(true);
            if (updateFromLanbahnData(i, 0)) {
                cb[i][0].setSelected(true);
            } else {
                cb[i][0].setSelected(false);
            }
            if (is2bitType(i)) {
                cb[i][1].setEnabled(true);
                if (updateFromLanbahnData(i, 1)) {
                    cb[i][1].setSelected(true);
                } else {
                    cb[i][1].setSelected(false);
                }
            } else {
                cb[i][1].setEnabled(false);
            }
        }

        // special handling if w_adr == 0  
        if (w_adr == 0) {
            // "0" is no valid lanbahn address
            cb[0][0].setEnabled(false);
            cb[0][1].setEnabled(false);
        }
    }

    private void savePrefs() {
        // fuer LN3 Programm, zB Belegtmelder: Instanz-Nummer (Klassenvariable) mit im
        // String, um mehrere Fensterpositionen zu speichern
        // auch SX-adresse jeweils speichern.
        String myInst = "WS" + myInstance;
        prefs.putInt(myInst + "windowX", getX());
        prefs.putInt(myInst + "windowY", getY());
        prefs.putInt(myInst + "adr", w_adr);

    }

    private void loadPrefs() {
        // reload the positions for the right instance
        String myInst = "WS" + myInstance;
        if (DEBUG) {
            System.out.println("loading Prefs for:" + myInst);
        }

        setLocation(prefs.getInt(myInst + "windowX", 200), prefs.getInt(myInst + "windowY", 200));
        w_adr = prefs.getInt(myInst + "adr", 80);

    }

}
